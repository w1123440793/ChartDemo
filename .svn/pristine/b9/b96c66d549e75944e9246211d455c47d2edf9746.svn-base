package demo.cn.chartdemo.chart;

import android.graphics.Rect;
import android.view.MotionEvent;

import de.greenrobot.event.EventBus;
import demo.cn.chartdemo.event.SubcolumnSelectEvent;
import demo.cn.chartdemo.model.ColumnDataModel;
import demo.cn.chartdemo.model.ColumnModel;
import demo.cn.chartdemo.model.SelectedModel;
import demo.cn.chartdemo.model.SubcolumnModel;

/**
 * Created by Albert on 2016/2/2.
 * Mail : lbh@jusfoun.com
 * TODO :
 * Description: 柱状图点击事件处理handler
 */
public class ColumnTouchHandler {

    private ColumnDataModel mDataModel;
    private SelectedModel downSelect,upSelect;

    public ColumnTouchHandler(ColumnDataModel dataModel) {
        this.mDataModel = dataModel;
    }

    public SelectedModel getDownSelect() {
        return downSelect;
    }

    public void setDownSelect(SelectedModel downSelect) {
        this.downSelect = downSelect;
    }

    public SelectedModel getUpSelect() {
        return upSelect;
    }

    public void setUpSelect(SelectedModel upSelect) {
        this.upSelect = upSelect;
    }

    /**
     * TODO 之后还需要进行滑动的处理
     * @param event
     * @return 事件是否被消费
     */
    public boolean handleEvent(MotionEvent event){
        boolean consumed = true;
        switch (event.getAction()){
            case MotionEvent.ACTION_DOWN:
                SelectedModel downModel = checkEvent(event);
                setDownSelect(downModel);
                listener.valueDown(downModel != null);
                break;
            case MotionEvent.ACTION_UP:
                SelectedModel upModel = checkEvent(event);
                setUpSelect(upModel);
                handleClick();
                break;
            case MotionEvent.ACTION_CANCEL:
                break;
            case MotionEvent.ACTION_MOVE:
                break;
        }
        return consumed;
    }

    /**
     * Description:判断操作是否是“点击子柱状图”
     */
    private void handleClick(){
        if ((getDownSelect() != null) && (getUpSelect() != null) && (getDownSelect().equals(getUpSelect()))){
            int firstIndex = getUpSelect().getFirstIndex();
            int secondIndex = getUpSelect().getSecondIndex();
            ColumnModel columnModel = mDataModel.getColumnModels().get(firstIndex);
            if ((columnModel != null) && (columnModel.getSubcolumnModels() != null)){
                SubcolumnModel model = columnModel.getSubcolumnModels().get(secondIndex);
                if (listener != null){
                    listener.valueSelected(model);
                }
                SubcolumnSelectEvent event = new SubcolumnSelectEvent();
                event.setShowtoast(true);
                event.setSubcolumnModel(model);
                EventBus.getDefault().post(event);
            }

        }else {
            SubcolumnSelectEvent event = new SubcolumnSelectEvent();
            event.setShowtoast(false);
            event.setSubcolumnModel(null);
            EventBus.getDefault().post(event);
        }
    }

    /**
     * Description: 检查事件是否位于柱状图的某个子柱上
     *
     * @return
     */
    private SelectedModel checkEvent(MotionEvent event){
        SelectedModel selected = null;
        for (ColumnModel columnModel : mDataModel.getColumnModels()){
            for (SubcolumnModel subcolumnModel : columnModel.getSubcolumnModels()){
                Rect rect = subcolumnModel.getRect();
                if (rect.contains((int)event.getX(),(int)event.getY())){
                    selected = new SelectedModel(subcolumnModel.getFirstIndex(),subcolumnModel.getSecondIndex());
                    break;
                }
            }
        }
        return selected;
    }

    private ValueSelectedListener listener;

    public void setListener(ValueSelectedListener listener) {
        this.listener = listener;
    }

    public interface ValueSelectedListener{
        public void valueSelected(SubcolumnModel subcolumnModel);
        public void valueDown(boolean target);
    }
}
