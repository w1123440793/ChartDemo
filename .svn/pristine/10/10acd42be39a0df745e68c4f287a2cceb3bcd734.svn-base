package demo.cn.chartdemo.view;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.PathEffect;
import android.graphics.Point;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Author  wangchenchen
 * CreateDate 2016/1/27.
 * Email wcc@jusfoun.com
 * Description
 */
public class LineChartView extends View {

    private int[] values,years;
    private int width,height;
    private float chartW,chartH;
    private Point zero;
    private List<PointF> points;
    private Paint dotPaint;
    private Paint linePaint;
    private int count;
    public LineChartView(Context context) {
        super(context);
        initViews();
    }

    public LineChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initViews();
    }

    public LineChartView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initViews();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawColor(Color.WHITE);
        canvas.drawLine(zero.x, zero.y, zero.x, zero.y + chartH, dotPaint);
        canvas.drawLine(zero.x,zero.y+chartH,zero.x+chartW,zero.y+chartH,dotPaint);
        for (int i = 0; i < 10; i++) {//纵轴刻度及虚线
            canvas.drawLine(zero.x,zero.y+chartH*i/10,zero.x+chartW,zero.y+chartH*i/10,linePaint);
        }
        for (int i = 0; i < 10; i++) {//横轴刻度
            canvas.drawLine(zero.x + chartW * i / 10, zero.y + chartH, zero.x + chartW * i / 10, zero.y + chartH - 20, dotPaint);
        }
        if (count>0){
            for (int i = 0; i < points.size(); i++) {
                float y=points.get(i).y;
                y=y-count>=0?y-count:y;
                if (i>0){
                    float y1=points.get(i-1).y;
                    y1=y1-count>=0?y1-count:y1;
                    canvas.drawLine(points.get(i - 1).x, y1, points.get(i).x, y, dotPaint);
                }
                canvas.drawCircle(points.get(i).x, y, 5, dotPaint);
            }
            count--;
            postInvalidate();
        }else {
            for (int i = 0; i < points.size(); i++) {
                if (i > 0) {
                    canvas.drawLine(points.get(i - 1).x, points.get(i - 1).y, points.get(i).x, points.get(i).y, dotPaint);
                }
                canvas.drawCircle(points.get(i).x, points.get(i).y, 5, dotPaint);
            }
        }

        if (isDrawLine&&movePoint.x>=zero.x&&movePoint.x<=points.get(points.size()-1).x)
        {
            canvas.drawLine(movePoint.x,zero.y,movePoint.x,zero.y+chartH,dotPaint);
        }

    }


    private void initViews(){
        zero=new Point();
        points=new ArrayList<>();
        values=new int[10];
        years=new int[10];
        dotPaint=new Paint();
        dotPaint.setColor(Color.RED);
        dotPaint.setAntiAlias(true);
        dotPaint.setStrokeWidth(2);
        dotPaint.setStyle(Paint.Style.FILL);

        linePaint=new Paint();
        linePaint.setColor(Color.LTGRAY);
        linePaint.setAlpha(100);
        linePaint.setStrokeWidth(1);
        linePaint.setStyle(Paint.Style.STROKE);
        PathEffect effect=new DashPathEffect(new float[]{1,2,4,8},1);
        linePaint.setPathEffect(effect);
        Random random=new Random();
        for (int i = 0; i < values.length; i++) {
            values[i]= random.nextInt(10);
            years[i]=2006+i;
            int index=values[i]-1;
            count=Math.max(count,index);
        }

    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        width=w;
        height=h;
        zero.x=w/10;
        zero.y=h/10;
        chartW=w*8/10;
        chartH=h*8/10;
        count*=h/10;
        for (int i = 0; i < values.length; i++) {
            PointF point=new PointF();
            point.x=zero.x+chartW*i/10;
            point.y=zero.y+chartH*(10-values[i])/10;
            points.add(point);
        }
    }

    private boolean isDrawLine=false;
    private PointF movePoint=new PointF();
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()){
            case MotionEvent.ACTION_DOWN:
                isDrawLine=true;
                break;
            case MotionEvent.ACTION_MOVE:
                movePoint.x=event.getX();
                movePoint.y=event.getY();
                postInvalidate();
                break;
            case MotionEvent.ACTION_UP:
                isDrawLine=false;
                break;
        }
        return true;
    }
}
