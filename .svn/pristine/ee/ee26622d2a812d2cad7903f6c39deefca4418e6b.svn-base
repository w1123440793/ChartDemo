package demo.cn.chartdemo.view;

import android.animation.ValueAnimator;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.RectF;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.VelocityTracker;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import demo.cn.chartdemo.Utils.MathHelper;
import demo.cn.chartdemo.chart.PieChart;
import demo.cn.chartdemo.model.PieChartModel;

/**
 * Author  wangchenchen
 * CreateDate 2016/1/20.
 * Email wcc@jusfoun.com
 * Description
 */
public class PieChartView extends View {

    private List<Integer> grayColors;//未选中饼图颜色
    private int red,green,blue;//随机生成红绿蓝色值
    private Paint paint;//画笔
    private Point mCentre;//中心点
    private int radius;//圆半径
    private Context context;
    private RectF maxArc, minArc;//扇形区域
    private RectF maxSelectArc, minSelectArc;//选中扇形区域
    private int clickCount = -1, lastCount = -1;//点击到扇形
    private List<PieChartModel> pieData;//扇形数据
    private List<Integer> colors;//所有扇形颜色
    private TextPaint textPaint;//字体画笔
    private VelocityTracker mVelocity;
    private int index;
    private PointF txtPoint;//字体位置
    public PieChartView(Context context) {
        super(context);
        initView(context);
    }

    public PieChartView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView(context);
    }

    public PieChartView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initView(context);
    }

    /**
     * 初始化
     * @param context
     */
    private void initView(Context context) {
        this.context = context;
        colors=new ArrayList<>();
        pieData=new ArrayList<>();
        grayColors=new ArrayList<>();
        Random random=new Random();
        int count=random.nextInt(10);
        while (count==0){
            count=random.nextInt(10);//随机生成饼图数量
        }
        //初始化饼图属性
        for (int i = 0; i <count; i++){
            if (i==0)
                grayColors.add(Color.DKGRAY);
            else{
                if (grayColors.get(i-1).equals(Color.DKGRAY))
                    grayColors.add(Color.GRAY);
                else if (grayColors.get(i-1).equals(Color.GRAY))
                    grayColors.add(Color.LTGRAY);
                else if (grayColors.get(i-1).equals(Color.LTGRAY))
                    grayColors.add(Color.DKGRAY);
            }
            PieChartModel model=new PieChartModel();
            float percent=1f/count*100;
            DecimalFormat decimalFormat=new DecimalFormat(".00");
            model.setPercent(decimalFormat.format(percent)+"%");
            model.setStartAngel(360f / count * i);
            model.setSectorAngel(360f / count);
            red=random.nextInt(255);
            green=random.nextInt(255);
            blue=random.nextInt(255);
            colors.add(Color.argb(255, red, green, blue));
            pieData.add(model);
            txtPoint=new PointF();
        }
    }

    private float count;
    private float clickAngel = 0f;
    private float countAngel = 0f;

    private float outCount = 0f;
    private float rectCount = 0f;

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        //设置画笔
        paint = new Paint();
        paint.setAntiAlias(true);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(Color.CYAN);
        mCentre =new Point(w/2,h/2);
        radius = Math.min(mCentre.x, mCentre.y);
        maxArc = new RectF();
        minArc = new RectF();
        maxSelectArc = new RectF();
        minSelectArc = new RectF();
        index= (int) (0.1f*radius);
        //设置饼图大小
        maxArc.set(mCentre.x - 6*index, mCentre.y - 6*index
                , mCentre.x + 6*index, mCentre.y + 6*index);
        minArc.set(mCentre.x - 4*index, mCentre.y - 4*index
                , mCentre.x + 4*index, mCentre.y + 4*index);
        maxSelectArc.set(mCentre.x - 6.5f * index, mCentre.y - 6.5f * index
                , mCentre.x + 6.5f * index, mCentre.y + 6.5f * index);
        minSelectArc.set(mCentre.x - 4.5f * index, mCentre.y - 4.5f * index
                , mCentre.x + 4.5f * index, mCentre.y + 4.5f * index);
        //选中饼图外扩大小
        count = index/2;

        //设置字体画笔
        textPaint = new TextPaint();
        textPaint.setColor(Color.BLACK);
        textPaint.setTextSize(25);
        textPaint.setAntiAlias(true);
        textPaint.setTextAlign(Paint.Align.CENTER);

        mVelocity = VelocityTracker.obtain();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.save();
        canvas.drawColor(Color.WHITE);//绘制背景

//        if (rectCount <= (0.7 * radius)) {
//            paint.setColor(Color.BLUE);
//            canvas.drawRoundRect(maxArc, rectCount, rectCount, paint);
//            rectCount += 5f;
//        } else
        if (animCount <= 360) {//饼图出现多好，从0度绘制到360度

            paint.setColor(Color.BLUE);
//            canvas.drawRoundRect(maxArc, rectCount, rectCount, paint);
            startAnim(canvas);
            postInvalidate();
        } else {

            if (clickCount != -1  && outCount <= count) {
                //外扩动画，从原始大小外扩到count
                if (lastCount!=clickCount) {//第一次点击外扩
                    minSelectArc.set(mCentre.x - 4*index - outCount, mCentre.y - 4*index - outCount
                            , mCentre.x + 4*index + outCount, mCentre.y + 4*index + outCount);
                    maxSelectArc.set(mCentre.x - 6*index - outCount, mCentre.y - 6*index - outCount
                            , mCentre.x + 6*index + outCount, mCentre.y + 6*index + outCount);
                }else if (lastCount==clickCount){//第二次点击收回
                    minSelectArc.set(mCentre.x - 4.5f * index + outCount, mCentre.y - 4.5f * index + outCount
                            , mCentre.x + 4.5f * index - outCount, mCentre.y + 4.5f * index - outCount);
                    maxSelectArc.set(mCentre.x - 6.5f * index + outCount, mCentre.y - 6.5f * index + outCount
                            , mCentre.x + 6.5f * index - outCount, mCentre.y + 6.5f * index - outCount);
                }

                for (int i = 0; i < pieData.size(); i++) {
                    if (i==clickCount) {
                        paint.setColor(colors.get(clickCount));
                        canvas.drawArc(maxSelectArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                        float angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                        angel=angel>360? angel-360: angel;
                        if (clickCount!=lastCount)
                            txtPoint= MathHelper.getInstanse().getPoint(angel, 5f * index + outCount, mCentre);
                        else
                            txtPoint= MathHelper.getInstanse().getPoint(angel, 5.5f * index - outCount, mCentre);
                        canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                    }else {
                        if (clickCount==lastCount)
                            paint.setColor(colors.get(i));
                        else
                            paint.setColor(grayColors.get(i));
                        canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                        paint.setColor(Color.WHITE);
                        canvas.drawArc(minArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                        txtPoint = MathHelper.getInstanse().getPoint(pieData.get(i).getStartAngel()  + countAngel + pieData.get(i).getSectorAngel()/2
                                , 0.5f * radius, mCentre);
                        canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                        paint.setColor(Color.WHITE);
                    }
                    outCount +=1f;
                }
                postInvalidate();
            } else {
                if (clickCount != -1 && Math.abs(countAngel) < Math.abs(clickAngel)) {
                    //点击后旋转动画，如果点击部分中心点在左边逆时针转动，在右边顺时针转动
//                    rotateAnim();
                    for (int i = 0; i < pieData.size(); i++) {
                        float angel=pieData.get(i).getStartAngel();
                        if (clickAngel>0) {
                            angel += 5f;
                            if (angel>=360)
                                angel-=360;
                        } else {
                            angel -= 5f;
                            if (angel<0)
                                angel+=360;
                        }
//                        angel+=(countAngel-lastAngel);
                        Log.e("angel1", angel + "");
                        pieData.get(i).setStartAngel(angel);
//                        if (Math.abs(countAngel) < Math.abs(clickAngel)) {
                        if (i == clickCount) {
                            paint.setColor(colors.get(clickCount));
                            canvas.drawArc(maxSelectArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                            angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                            angel=angel>360? angel-360: angel;
                            Log.e("angel2",angel+"");
                            txtPoint = MathHelper.getInstanse().getPoint(angel, 5f * index+count , mCentre);
                            canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                        } else {
                            if (clickCount==lastCount)
                                paint.setColor(colors.get(i));
                            else
                                paint.setColor(grayColors.get(i));
                            canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                            paint.setColor(Color.WHITE);
                            canvas.drawArc(minArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                            angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                            angel=angel>360? angel-360: angel;
                            txtPoint = MathHelper.getInstanse().getPoint(angel, 0.5f * radius , mCentre);
                            canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                        }
                    }
                    paint.setColor(Color.WHITE);
                    if (clickAngel>=0) {
                        countAngel +=5f;
                    }
                    else
                        countAngel-=5f;

                    postInvalidate();
                } else {
                    //根据手势旋转，根据手势运动旋转饼图
                    countAngel = 0;
                    clickAngel = 0;
                    float angel;
                    for (int i = 0; i < pieData.size(); i++) {
                        if (clickCount != -1) {

                            if (i == clickCount&&clickCount!=lastCount) {
                                paint.setColor(colors.get(clickCount));
                                canvas.drawArc(maxSelectArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                                angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                                angel=angel>360? angel-360: angel;
                                txtPoint = MathHelper.getInstanse().getPoint(angel, 0.5f * radius+count , mCentre);
                                canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                            } else {
                                if (clickCount==lastCount)
                                    paint.setColor(colors.get(i));
                                else
                                    paint.setColor(grayColors.get(i));
                                canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                                paint.setColor(Color.WHITE);
                                canvas.drawArc(minArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                                angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                                angel=angel>360? angel-360: angel;
                                txtPoint = MathHelper.getInstanse().getPoint(angel, 0.5f * radius , mCentre);
                                canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                            }
                        } else {

                            paint.setColor(colors.get(i));
                            canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                            paint.setColor(Color.WHITE);
                            canvas.drawArc(minArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                            angel=pieData.get(i).getStartAngel()+pieData.get(i).getSectorAngel()/2;
                            angel = angel > 360 ? angel - 360 : angel;
                            txtPoint = MathHelper.getInstanse().getPoint(angel, 0.5f * radius, mCentre);
                            canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                        }
                    }
                }
            }
        }
        paint.setColor(Color.WHITE);
        canvas.drawCircle(mCentre.x, mCentre.y, 4 * index, paint);//绘制中心圆，成为环形饼图

        if (clickCount >= 0 && clickCount < pieData.size()) {//判断是否有外扩饼图
            canvas.drawArc(minSelectArc, pieData.get(clickCount).getStartAngel(), pieData.get(clickCount).getSectorAngel(), true, paint);
        }
        canvas.restore();
    }

    private int animCount = 0;

    /**
     * 开始动画
     * @param canvas
     */
    private void startAnim(Canvas canvas) {

        int curcentCount = 0;
        if (animCount <= 360) {
            for (int i = 0; i < pieData.size(); i++) {
                if (i == 0) {
                    if (animCount < pieData.get(i).getStartAngel() + pieData.get(i).getSectorAngel())
                        curcentCount = 0;
                } else {
                    if (animCount <= pieData.get(i).getStartAngel() + pieData.get(i).getSectorAngel() && animCount > pieData.get(i).getStartAngel())
                        curcentCount = i;
                }
            }
        }
        for (int i = 0; i < curcentCount + 1; i++) {
            if (i == curcentCount) {
                paint.setColor(colors.get(i));
                canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), animCount - pieData.get(curcentCount).getStartAngel(), true, paint);
                if (animCount > pieData.get(i).getStartAngel() + pieData.get(i).getSectorAngel()/2) {
                    txtPoint = MathHelper.getInstanse().getPoint(pieData.get(i).getStartAngel() + pieData.get(i).getSectorAngel()/2, 0.5f * radius, mCentre);
                    canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
                }

            } else {
                paint.setColor(colors.get(i));
                canvas.drawArc(maxArc, pieData.get(i).getStartAngel(), pieData.get(i).getSectorAngel(), true, paint);
                txtPoint = MathHelper.getInstanse().getPoint(pieData.get(i).getStartAngel() + pieData.get(i).getSectorAngel()/2, 0.5f * radius, mCentre);
                canvas.drawText(pieData.get(i).getPercent(), txtPoint.x, txtPoint.y, textPaint);
            }
        }
        animCount += 5;
    }

    private boolean isMove = false;
    private Point lastDown = new Point();
    private Point moveDown = new Point();
    private float moveAngel = 0;
    private boolean noTouch=true;
    private boolean doublePoint=false;

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        mVelocity.addMovement(event);
        mVelocity.computeCurrentVelocity(1000);
//        if (Math.abs(countAngel)<Math.abs(clickAngel)&&clickAngel!=0){
//            return;
//        }
        if (event.getPointerCount()>=2){
            doublePoint=true;
            return true;

        }
        switch (event.getAction()) {

            case MotionEvent.ACTION_DOWN:
                isMove = false;
                noTouch=false;
                doublePoint=false;
                countAngel = 0;
                clickAngel = 0;
                lastDown.x = (int) event.getX();
                lastDown.y = (int) event.getY();
                moveDown.x = (int) event.getX();
                moveDown.y = (int) event.getY();
                break;
            case MotionEvent.ACTION_MOVE:
                if (doublePoint)
                    break;
                moveDown.x = (int) event.getX();
                moveDown.y = (int) event.getY();
                if (Math.sqrt(Math.pow(moveDown.x - lastDown.x, 2) + Math.pow(moveDown.y - lastDown.y, 2)) > 10) {
                    float fromAngel = MathHelper.getInstanse().getAngel(lastDown.x, lastDown.y, mCentre);
                    float toAngel = MathHelper.getInstanse().getAngel(moveDown.x, moveDown.y, mCentre);
                    for (int i = 0; i < pieData.size(); i++) {
                        float angel=pieData.get(i).getStartAngel();
                        angel+=(toAngel-fromAngel);
                        if (angel>=360)
                            angel-=360;
                        if (angel<=0)
                            angel+=360;
                        pieData.get(i).setStartAngel(angel);
                        Log.e("startangel",i+"=="+pieData.get(i).getStartAngel());
                    }
//                    pieChartView.postInvalidate();
                    postInvalidate();
                    isMove = true;
                    lastDown.x = moveDown.x;
                    lastDown.y = moveDown.y;
                }
                break;
            case MotionEvent.ACTION_UP:

                if (doublePoint)
                    break;
                if (isMove) {
                    noTouch=true;
                    return true;
                }
                if (MathHelper.getInstanse().isInPie(6*index, event.getX(), event.getY(), mCentre)) {
                    Log.e("moveangel", moveAngel + "");
                    if (lastCount!=clickCount)
                        lastCount = clickCount;
                    else
                        lastCount=-1;
                    for (int i = 0; i < pieData.size() ; i++) {
                        PieChartModel model=pieData.get(i);
//                        if (lastCount!=-1)
//                        {
                            if (MathHelper.getInstanse().isAngelArc(0.7f * radius, 4*index, event.getX()
                                    , event.getY(), mCentre, model.getStartAngel(), model.getSectorAngel())){
                                clickCount=i;
//                                lastCount=-1;
                                break;
//                            }

                        }
//                            else if (MathHelper.getInstanse().isAngelArc(6*index, 4*index, event.getX()
//                                , event.getY(), mCentre, model.getStartAngel(), model.getSectorAngel())) {
//                            clickCount = i;
//                            break;
//                        }
                    }
//                    if (clickCount==lastCount)
//                        clickCount=-1;
                    if (clickCount != -1) {
                        clickAngel=pieData.get(clickCount).getStartAngel()+pieData.get(clickCount).getSectorAngel()/2;
                        if (clickAngel>=360)
                            clickAngel-=360;
                        outCount = 0f;
                        if (clickAngel>=270&&clickAngel<=360){
                            clickAngel=360-clickAngel+90;
                        }else if (clickAngel>=90&&clickAngel<=270){
                            clickAngel=90-clickAngel;
                        }else if (clickAngel>=0&&clickAngel<=90){
                            clickAngel=90-clickAngel;
                        }
                        postInvalidate();
                    }
                }
                noTouch=true;
        }
        return true;
    }

    private ValueAnimator valueAnimator=new ValueAnimator();

    private boolean startAnim=false;
    private float lastAngel;
    private void rotateAnim(){
        valueAnimator.setIntValues(0, (int) clickAngel);
        valueAnimator.setDuration(500);
        startAnim = true;
        valueAnimator.setInterpolator(new AccelerateDecelerateInterpolator());
        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                lastAngel = countAngel;
                countAngel = (Integer) animation.getAnimatedValue();
            }
        });
        if (!valueAnimator.isStarted())
            valueAnimator.start();
    }
}
